parameters:
- name: buildId
  type: string
- name: postgreSQLPath
  type: string
- name: project
  type: string
- name: username
  type: string
- name: password
  type: string
- name: host
  type: string
- name: port
  type: string
- name: databaseName
  type: string
- name: backupPath
  type: string

steps:
- task: PowerShell@2
  displayName: 'Backup Database'
  inputs:
    targetType: 'inline' 
    script: |
      $postgresPathToBin = ';${{ parameters.postgreSQLPath }}\bin'
      $postgresPathToData = ';${{ parameters.postgreSQLPath }}\data'
      $env:Path += $postgresPathToBin + $postgresPathToData
      $env:PGDATA = $postgresPathToData
      $env:PGPASSWORD = '${{ parameters.password }}'
      pg_dump -h ${{ parameters.host }} -p ${{ parameters.port }} -U ${{ parameters.username }} -d ${{ parameters.databaseName }} -a -F c -f ${{ parameters.backupPath }}\${{ parameters.databaseName }}\${{ parameters.buildId }}.bak

- task: PowerShell@2
  displayName: 'Apply PostgreSQL Database Migrations'
  inputs:
    targetType: 'inline' 
    script: |
      $postgresPathToBin = ';${{ parameters.postgreSQLPath }}\bin'
      $postgresPathToData = ';${{ parameters.postgreSQLPath }}\data'
      $env:Path += $postgresPathToBin + $postgresPathToData
      $env:PGDATA = $postgresPathToData
      $env:PGPASSWORD = '${{ parameters.password }}'
      psql -h ${{ parameters.host }} -p ${{ parameters.port }} -U ${{ parameters.username }} -d ${{ parameters.databaseName }} -a -f $(Pipeline.Workspace)\${{ parameters.project }}\migrations.sql